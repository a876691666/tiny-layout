var x=Object.defineProperty;var B=(a,t,e)=>t in a?x(a,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[t]=e;var c=(a,t,e)=>B(a,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const i of n)if(i.type==="childList")for(const d of i.addedNodes)d.tagName==="LINK"&&d.rel==="modulepreload"&&s(d)}).observe(document,{childList:!0,subtree:!0});function e(n){const i={};return n.integrity&&(i.integrity=n.integrity),n.referrerPolicy&&(i.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?i.credentials="include":n.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(n){if(n.ep)return;n.ep=!0;const i=e(n);fetch(n.href,i)}})();class k{constructor(){c(this,"data",new Map);c(this,"subscribers",new Map);c(this,"globalSubscribers",new Set)}get(t){return this.data.get(t)}set(t,e){this.data.set(t,e);const s=this.subscribers.get(t);s&&s.forEach(n=>{try{n(e)}catch(i){console.error(`Error in subscriber for key "${t}":`,i)}}),this.globalSubscribers.forEach(n=>{try{n(t,e)}catch(i){console.error("Error in global subscriber:",i)}})}delete(t){this.data.delete(t),this.subscribers.delete(t),this.globalSubscribers.forEach(e=>{try{e(t,void 0)}catch(s){console.error("Error in global subscriber:",s)}})}clear(){const t=Array.from(this.data.keys());this.data.clear(),this.subscribers.clear(),t.forEach(e=>{this.globalSubscribers.forEach(s=>{try{s(e,void 0)}catch(n){console.error("Error in global subscriber:",n)}})})}keys(){return Array.from(this.data.keys())}subscribe(t,e){this.subscribers.has(t)||this.subscribers.set(t,new Set);const s=this.subscribers.get(t);s.add(e);const n=this.data.get(t);if(n!==void 0)try{e(n)}catch(i){console.error(`Error in initial callback for key "${t}":`,i)}return()=>{s.delete(e),s.size===0&&this.subscribers.delete(t)}}subscribeAll(t){return this.globalSubscribers.add(t),this.data.forEach((e,s)=>{try{t(s,e)}catch(n){console.error("Error in initial global callback:",n)}}),()=>{this.globalSubscribers.delete(t)}}}class A{constructor(t={}){c(this,"adapters",new Map);c(this,"dataState");c(this,"options");c(this,"checkoutFunctions",new Map);c(this,"dataCallbacks",new Set);this.options={enableLogging:!0,maxRetries:3,retryDelay:1e3,...t},this.dataState=new k}addAdapter(t){if(this.adapters.has(t.name))throw new Error(`Adapter with name "${t.name}" already exists`);this.adapters.set(t.name,t),t.onData(e=>{this.handleAdapterData(e)}),this.options.enableLogging&&console.log(`Added adapter: ${t.name}`)}async removeAdapter(t){const e=this.adapters.get(t);if(!e)throw new Error(`Adapter "${t}" not found`);e.isConnected()&&await e.disconnect(),this.adapters.delete(t),this.checkoutFunctions.delete(t),this.options.enableLogging&&console.log(`Removed adapter: ${t}`)}getAdapter(t){return this.adapters.get(t)}getAllAdapters(){return Array.from(this.adapters.values())}async connectAdapter(t){const e=this.adapters.get(t);if(!e)throw new Error(`Adapter "${t}" not found`);await e.connect(),this.options.enableLogging&&console.log(`Connected adapter: ${t}`)}async disconnectAdapter(t){const e=this.adapters.get(t);if(!e)throw new Error(`Adapter "${t}" not found`);await e.disconnect(),this.options.enableLogging&&console.log(`Disconnected adapter: ${t}`)}async connectAll(){const t=Array.from(this.adapters.values()).map(async e=>{try{await e.connect(),this.options.enableLogging&&console.log(`Connected adapter: ${e.name}`)}catch(s){throw console.error(`Failed to connect adapter "${e.name}":`,s),s}});await Promise.all(t)}async disconnectAll(){const t=Array.from(this.adapters.values()).map(async e=>{try{await e.disconnect(),this.options.enableLogging&&console.log(`Disconnected adapter: ${e.name}`)}catch(s){console.error(`Failed to disconnect adapter "${e.name}":`,s)}});await Promise.allSettled(t)}setCheckoutFunction(t,e){this.checkoutFunctions.set(t,e)}removeCheckoutFunction(t){this.checkoutFunctions.delete(t)}getDataState(){return this.dataState}onData(t){return this.dataCallbacks.add(t),()=>{this.dataCallbacks.delete(t)}}getAdapterStatus(){const t={};return this.adapters.forEach((e,s)=>{t[s]=e.isConnected()}),t}getStats(){const t=Array.from(this.adapters.values()).filter(e=>e.isConnected()).length;return{totalAdapters:this.adapters.size,connectedAdapters:t,dataStateKeys:this.dataState.keys().length}}handleAdapterData(t){try{const e=this.checkoutFunctions.get(t.source||"");let s=t,n=this.generateStateKey(t);if(e){const i=e(t.data);s={...t,data:i.data},n=i.key}s.data&&s.data.stateUpdates&&Object.entries(s.data.stateUpdates).forEach(([i,d])=>{this.dataState.set(i,d)}),this.dataState.set(n,s),this.dataCallbacks.forEach(i=>{try{i(s)}catch(d){console.error("Error in data callback:",d)}}),this.options.enableLogging}catch(e){console.error("Error handling adapter data:",e)}}generateStateKey(t){return`${t.source||"unknown"}_${t.id}`}}class R{constructor(t){c(this,"dataAdapterLayer");c(this,"dataState");c(this,"stateChangeCallbacks",new Set);c(this,"dataReceivedCallbacks",new Set);c(this,"unsubscribeStateChanges",null);c(this,"unsubscribeDataReceived",null);this.dataAdapterLayer=t,this.dataState=t.getDataState(),this.setupListeners()}onStateChange(t,e){if(typeof t=="string"&&e){const s=t;return this.dataState.subscribe(s,e)}else if(typeof t=="function"){const s=t;return this.stateChangeCallbacks.add(s),()=>{this.stateChangeCallbacks.delete(s)}}else throw new Error("Invalid arguments for onStateChange")}onDataReceived(t){return this.dataReceivedCallbacks.add(t),()=>{this.dataReceivedCallbacks.delete(t)}}destroy(){this.unsubscribeStateChanges&&(this.unsubscribeStateChanges(),this.unsubscribeStateChanges=null),this.unsubscribeDataReceived&&(this.unsubscribeDataReceived(),this.unsubscribeDataReceived=null),this.stateChangeCallbacks.clear(),this.dataReceivedCallbacks.clear()}getListenerCount(){return{stateChange:this.stateChangeCallbacks.size,dataReceived:this.dataReceivedCallbacks.size}}setupListeners(){this.unsubscribeStateChanges=this.dataState.subscribeAll((t,e)=>{this.stateChangeCallbacks.forEach(s=>{try{s(t,e)}catch(n){console.error("Error in state change callback:",n)}})}),this.unsubscribeDataReceived=this.dataAdapterLayer.onData(t=>{this.dataReceivedCallbacks.forEach(e=>{try{e(t)}catch(s){console.error("Error in data received callback:",s)}})})}}class T{constructor(t,e={}){c(this,"listener");c(this,"options");c(this,"dataQueue",[]);c(this,"batchTimer",null);c(this,"processingCallbacks",new Set);c(this,"errorCallbacks",new Set);c(this,"unsubscribeDataReceived",null);this.listener=t,this.options={enableLogging:!0,batchSize:1,batchTimeout:1e3,errorRetryAttempts:3,errorRetryDelay:1e3,...e},this.setupDataConsumption()}consume(t){try{this.options.batchSize>1?this.addToBatch(t):this.processData(t)}catch(e){this.onError(e)}}onError(t){this.options.enableLogging&&console.error("Consumer error:",t),this.errorCallbacks.forEach(e=>{try{e(t)}catch(s){console.error("Error in error callback:",s)}})}onData(t){return this.processingCallbacks.add(t),()=>{this.processingCallbacks.delete(t)}}onErrorCallback(t){return this.errorCallbacks.add(t),()=>{this.errorCallbacks.delete(t)}}flush(){this.dataQueue.length>0&&this.processBatch()}getQueueStatus(){return{queueLength:this.dataQueue.length,batchSize:this.options.batchSize,processingCallbacks:this.processingCallbacks.size,errorCallbacks:this.errorCallbacks.size}}updateOptions(t){this.options={...this.options,...t},t.batchSize===1&&this.dataQueue.length>0&&this.flush()}destroy(){this.batchTimer&&(clearTimeout(this.batchTimer),this.batchTimer=null),this.unsubscribeDataReceived&&(this.unsubscribeDataReceived(),this.unsubscribeDataReceived=null),this.flush(),this.processingCallbacks.clear(),this.errorCallbacks.clear(),this.dataQueue=[]}setupDataConsumption(){this.unsubscribeDataReceived=this.listener.onDataReceived(t=>{this.consume(t)})}addToBatch(t){if(this.dataQueue.push(t),this.dataQueue.length>=this.options.batchSize){this.processBatch();return}this.batchTimer||(this.batchTimer=setTimeout(()=>{this.processBatch()},this.options.batchTimeout))}processBatch(){if(this.batchTimer&&(clearTimeout(this.batchTimer),this.batchTimer=null),this.dataQueue.length===0)return;const t=[...this.dataQueue];this.dataQueue=[];try{this.processData(t)}catch(e){this.onError(e)}}processData(t){this.processingCallbacks.forEach(e=>{try{e(t)}catch(s){console.error("Error in processing callback:",s),this.onError(s)}})}}class G{constructor(t){c(this,"name");c(this,"connected",!1);c(this,"dataCallbacks",new Set);this.name=t}isConnected(){return this.connected}onData(t){this.dataCallbacks.add(t)}offData(t){this.dataCallbacks.delete(t)}emitData(t){this.dataCallbacks.forEach(e=>{try{e(t)}catch(s){console.error(`Error in data callback for adapter "${this.name}":`,s)}})}createDataItem(t,e){return{id:e||this.generateId(),timestamp:Date.now(),data:t,source:this.name}}generateId(){return`${this.name}-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}}class _ extends G{constructor(e,s={}){super(e);c(this,"options");c(this,"timer",null);c(this,"totalItemCount",0);this.options={interval:2e3,maxItems:1,autoStart:!0,dataGenerator:this.defaultDataGenerator.bind(this),...s}}async connect(){this.connected||(this.connected=!0,this.totalItemCount=0,this.options.autoStart&&this.startGenerating(),console.log(`Mock adapter "${this.name}" connected`))}async disconnect(){this.connected=!1,this.stopGenerating(),console.log(`Mock adapter "${this.name}" disconnected`)}startGenerating(){!this.connected||this.timer||(this.timer=setInterval(()=>{var e,s;try{const n=this.options.maxItems||1;for(let i=0;i<n;i++){const d=((s=(e=this.options).dataGenerator)==null?void 0:s.call(e))??this.defaultDataGenerator();this.emitData(this.createDataItem(d)),this.totalItemCount++}}catch(n){console.error(`Error generating mock data in adapter "${this.name}":`,n)}},this.options.interval))}stopGenerating(){this.timer&&(clearInterval(this.timer),this.timer=null)}generateOne(){var e,s;if(!this.connected){console.warn(`Cannot generate data: Mock adapter "${this.name}" is not connected`);return}try{const n=this.options.maxItems||1;for(let i=0;i<n;i++){const d=((s=(e=this.options).dataGenerator)==null?void 0:s.call(e))??this.defaultDataGenerator();this.emitData(this.createDataItem(d)),this.totalItemCount++}}catch(n){console.error(`Error generating mock data in adapter "${this.name}":`,n)}}resetCount(){this.totalItemCount=0}getItemCount(){return this.totalItemCount}updateOptions(e){const s=this.timer!==null;s&&this.stopGenerating(),this.options={...this.options,...e},s&&this.connected&&this.startGenerating()}defaultDataGenerator(){const e=["user","order","product","event"];switch(e[Math.floor(Math.random()*e.length)]){case"user":return{type:"user",id:Math.floor(Math.random()*1e4),name:`User${Math.floor(Math.random()*1e3)}`,email:`user${Math.floor(Math.random()*1e3)}@example.com`,status:Math.random()>.5?"active":"inactive"};case"order":return{type:"order",id:`ORDER-${Math.floor(Math.random()*1e5)}`,amount:Math.floor(Math.random()*1e3)+10,currency:"USD",status:["pending","processing","completed","cancelled"][Math.floor(Math.random()*4)]};case"product":return{type:"product",id:`PROD-${Math.floor(Math.random()*1e4)}`,name:`Product ${Math.floor(Math.random()*1e3)}`,price:Math.floor(Math.random()*500)+5,category:["electronics","clothing","books","home"][Math.floor(Math.random()*4)]};case"event":return{type:"event",name:["click","view","purchase","signup"][Math.floor(Math.random()*4)],userId:Math.floor(Math.random()*1e4),metadata:{page:`/page${Math.floor(Math.random()*10)}`,userAgent:"MockBrowser/1.0"}};default:return{type:"unknown",value:Math.random(),message:"Generated mock data"}}}}class z{static create(t={}){const e=new A(t),s=new R(e),n=new T(s);return{dataAdapterLayer:e,listener:s,consumer:n,dataState:e.getDataState()}}}let h=null,r=null,v=null,y=null,l=new Map,C=new Map,L=0,$=0,g=!1;function S(){l.clear();const a=["办公室A","办公室B","会议室1","会议室2","走廊","仓库","实验室","机房","休息区","前台"];for(let t=1;t<=500;t++){const e=`SENSOR_${t.toString().padStart(3,"0")}`,s={id:e,name:`温湿度传感器-${t}`,location:a[Math.floor(Math.random()*a.length)],temperature:20+Math.random()*15,humidity:30+Math.random()*40,dustLevel:Math.random()*100,status:Math.random()>.05?"online":"offline",lastUpdate:Date.now(),batteryLevel:20+Math.random()*80};l.set(e,s)}}function M(){const a=document.getElementById("devicesGrid");a.innerHTML="",C.clear(),l.forEach(t=>{const e=document.createElement("div");e.className="device-cell offline",e.dataset.deviceId=t.id;const s=m(t.temperature,t.humidity,t.dustLevel),n=E(t.status,s);e.innerHTML=`
      <div class="status-icon">${n}</div>
      <div class="device-id">${t.id.replace("SENSOR_","")}</div>
      <div class="device-status">${t.status}</div>
      <div class="device-values">
        <div>🌡️${Math.round(t.temperature)}°</div>
        <div>💧${Math.round(t.humidity)}%</div>
        <div>🌫️${Math.round(t.dustLevel)}</div>
        <div>🔋${Math.round(t.batteryLevel)}%</div>
      </div>
    `,e.addEventListener("click",()=>I(t)),a.appendChild(e),C.set(t.id,e)})}function E(a,t){return a==="offline"?"🔴":t==="critical"?"🚨":t==="warning"?"⚠️":"🟢"}function F(a){const t=C.get(a.id);if(!t)return;const e=m(a.temperature,a.humidity,a.dustLevel),s=E(a.status,e);t.className="device-cell",a.status==="offline"?t.classList.add("offline"):e==="critical"?t.classList.add("critical"):e==="warning"?t.classList.add("warning"):t.classList.add("online"),t.innerHTML=`
    <div class="status-icon">${s}</div>
    <div class="device-id">${a.id.replace("SENSOR_","")}</div>
    <div class="device-status">${a.status}</div>
    <div class="device-values">
      <div>🌡️${Math.round(a.temperature)}°</div>
      <div>💧${Math.round(a.humidity)}%</div>
      <div>🌫️${Math.round(a.dustLevel)}</div>
      <div>🔋${Math.round(a.batteryLevel)}%</div>
    </div>
  `,t.onclick=()=>I(a)}function I(a){const t=m(a.temperature,a.humidity,a.dustLevel);alert(`设备详情：
${t==="critical"?"🔴":t==="warning"?"🟡":"🟢"} ${a.name} (${a.id})
📍 位置: ${a.location}
📊 状态: ${a.status}
🌡️ 温度: ${a.temperature.toFixed(1)}°C ${a.temperature<15||a.temperature>35?"⚠️":""}
💧 湿度: ${a.humidity.toFixed(1)}% ${a.humidity<20||a.humidity>80?"⚠️":""}
🌫️ 灰尘: ${a.dustLevel.toFixed(1)} μg/m³ ${a.dustLevel>75?"⚠️":""}
🔋 电量: ${a.batteryLevel.toFixed(0)}% ${a.batteryLevel<20?"⚠️":""}
⏰ 更新: ${new Date(a.lastUpdate).toLocaleString()}
🚨 告警级别: ${t}`)}const o={connectBtn:document.getElementById("connectBtn"),disconnectBtn:document.getElementById("disconnectBtn"),generateBtn:document.getElementById("generateBtn"),pauseBtn:document.getElementById("pauseBtn"),resumeBtn:document.getElementById("resumeBtn"),clearBtn:document.getElementById("clearBtn"),connectionStatus:document.getElementById("connectionStatus"),deviceCount:document.getElementById("totalCount"),onlineCount:document.getElementById("onlineCount"),alertCount:document.getElementById("alertCount"),dataList:document.getElementById("dataList"),stateList:document.getElementById("stateList"),interval:document.getElementById("interval"),maxItems:document.getElementById("maxItems"),devicesGrid:document.getElementById("devicesGrid")};function m(a,t,e){const s=a<15||a>35,n=t<20||t>80,i=e>75,d=[s,n,i].filter(Boolean).length;return d>=2?"critical":d>=1?"warning":"normal"}function O(a){a.temperature+=(Math.random()-.5)*4,a.temperature=Math.max(10,Math.min(40,a.temperature)),a.humidity+=(Math.random()-.5)*10,a.humidity=Math.max(10,Math.min(90,a.humidity)),a.dustLevel+=(Math.random()-.5)*20,a.dustLevel=Math.max(0,Math.min(150,a.dustLevel)),Math.random()<.1&&(a.batteryLevel=Math.max(0,a.batteryLevel-Math.random()*2)),Math.random()<.001&&(a.status=a.status==="online"?"offline":"online"),a.batteryLevel<10&&Math.random()<.05&&(a.status="offline"),a.lastUpdate=Date.now(),F(a)}function N(a,t){return new _("sensor-data",{interval:a,maxItems:t,autoStart:!0,dataGenerator:()=>{const e=Array.from(l.keys()),s=e[Math.floor(Math.random()*e.length)],n=l.get(s);if(!n)return null;O(n),L++;const i=m(n.temperature,n.humidity,n.dustLevel);return i!=="normal"&&$++,{deviceId:n.id,deviceName:n.name,location:n.location,temperature:Math.round(n.temperature*10)/10,humidity:Math.round(n.humidity*10)/10,dustLevel:Math.round(n.dustLevel*10)/10,status:n.status,batteryLevel:Math.round(n.batteryLevel),timestamp:n.lastUpdate,alertLevel:i,stateUpdates:{[`device_${n.id}_temperature`]:n.temperature,[`device_${n.id}_humidity`]:n.humidity,[`device_${n.id}_dustLevel`]:n.dustLevel,[`device_${n.id}_status`]:n.status,[`device_${n.id}_battery`]:n.batteryLevel,[`device_${n.id}_lastUpdate`]:n.lastUpdate,total_data_count:L,alert_count:$,online_devices:Array.from(l.values()).filter(u=>u.status==="online").length}}}})}function f(){o.connectionStatus.textContent=r!=null&&r.isConnected()?"已连接":"未连接",o.connectionStatus.style.color=r!=null&&r.isConnected()?"#10b981":"#ef4444",o.deviceCount.textContent=l.size.toString();const a=Array.from(l.values()).filter(t=>t.status==="online").length;if(o.onlineCount.textContent=a.toString(),o.alertCount){const t=Array.from(l.values()).filter(e=>m(e.temperature,e.humidity,e.dustLevel)!=="normal").length;o.alertCount.textContent=t.toString()}}function b(){const a=(r==null?void 0:r.isConnected())||!1;o.connectBtn.disabled=a,o.disconnectBtn.disabled=!a,o.generateBtn.disabled=!a,o.pauseBtn.disabled=!a||g,o.resumeBtn.disabled=!a||!g}function U(a){const t=document.createElement("div");t.className="data-item new";const e=a.alertLevel==="critical"?"🔴":a.alertLevel==="warning"?"🟡":"🟢";t.innerHTML=`
    <div class="sensor-header">
      <span class="alert-icon">${e}</span>
      <strong>${a.deviceName}</strong>
      <span style="font-size: 0.7rem; color: #64748b;">${a.deviceId}</span>
    </div>
    <div class="sensor-location">📍 ${a.location}</div>
    <div class="sensor-data">
      <div class="data-row">
        <span>🌡️ 温度:</span> <span class="${a.temperature<15||a.temperature>35?"alert-value":""}">${a.temperature}°C</span>
      </div>
      <div class="data-row">
        <span>💧 湿度:</span> <span class="${a.humidity<20||a.humidity>80?"alert-value":""}">${a.humidity}%</span>
      </div>
      <div class="data-row">
        <span>🌫️ 灰尘:</span> <span class="${a.dustLevel>75?"alert-value":""}">${a.dustLevel} μg/m³</span>
      </div>
      <div class="data-row">
        <span>🔋 电量:</span> <span class="${a.batteryLevel<20?"alert-value":""}">${a.batteryLevel}%</span>
      </div>
    </div>
    <div class="timestamp">${new Date(a.timestamp).toLocaleTimeString()}</div>
  `,o.dataList.insertBefore(t,o.dataList.firstChild),setTimeout(()=>t.classList.remove("new"),300);const s=o.dataList.children;s.length>10&&o.dataList.removeChild(s[s.length-1])}function w(){if(!h)return;const a=Array.from(l.values()).filter(u=>u.status==="online").length,t=l.size-a,e=Array.from(l.values()).filter(u=>m(u.temperature,u.humidity,u.dustLevel)==="warning").length,s=Array.from(l.values()).filter(u=>m(u.temperature,u.humidity,u.dustLevel)==="critical").length,n=Array.from(l.values()).reduce((u,p)=>u+p.temperature,0)/l.size,i=Array.from(l.values()).reduce((u,p)=>u+p.humidity,0)/l.size,d=Array.from(l.values()).reduce((u,p)=>u+p.dustLevel,0)/l.size;o.stateList.innerHTML=`
    <div style="padding: 15px;">
      <h4 style="margin-bottom: 15px; color: #1e293b;">📊 设备统计</h4>
      <div style="display: grid; gap: 10px;">
        <div style="display: flex; justify-content: space-between; padding: 8px; background: #f0f9ff; border-radius: 6px;">
          <span>🟢 在线设备:</span> <strong>${a}</strong>
        </div>
        <div style="display: flex; justify-content: space-between; padding: 8px; background: #fef2f2; border-radius: 6px;">
          <span>🔴 离线设备:</span> <strong>${t}</strong>
        </div>
        <div style="display: flex; justify-content: space-between; padding: 8px; background: #fffbeb; border-radius: 6px;">
          <span>⚠️ 告警设备:</span> <strong>${e}</strong>
        </div>
        <div style="display: flex; justify-content: space-between; padding: 8px; background: #fef2f2; border-radius: 6px;">
          <span>🚨 严重告警:</span> <strong>${s}</strong>
        </div>
      </div>
      
      <h4 style="margin: 20px 0 15px; color: #1e293b;">📈 平均值</h4>
      <div style="display: grid; gap: 8px;">
        <div style="display: flex; justify-content: space-between; padding: 6px; background: #f8fafc; border-radius: 4px;">
          <span>🌡️ 平均温度:</span> <span>${n.toFixed(1)}°C</span>
        </div>
        <div style="display: flex; justify-content: space-between; padding: 6px; background: #f8fafc; border-radius: 4px;">
          <span>💧 平均湿度:</span> <span>${i.toFixed(1)}%</span>
        </div>
        <div style="display: flex; justify-content: space-between; padding: 6px; background: #f8fafc; border-radius: 4px;">
          <span>🌫️ 平均灰尘:</span> <span>${d.toFixed(1)} μg/m³</span>
        </div>
      </div>
    </div>
  `}async function Q(){try{const a=parseInt(o.interval.value),t=parseInt(o.maxItems.value);S(),M(),h=z.create(),r=N(a,t),h.dataAdapterLayer.addAdapter(r),h.dataAdapterLayer.setCheckoutFunction("sensor-data",e=>({key:`sensor-${e.deviceId}`,data:{...e,processed:!0,processedAt:Date.now(),stateUpdates:e.stateUpdates}})),v=h.dataState.subscribe("sensor-SENSOR_052",e=>{console.log("设备状态变化: sensor-SENSOR_052 =",e),w(),f()}),y=h.listener.onDataReceived(e=>{const s=e.data;U(s),f()}),await r.connect(),b(),f(),w()}catch(a){alert("连接失败: "+a.message)}}async function P(){try{r!=null&&r.isConnected()&&await r.disconnect(),v&&(v(),v=null),y&&(y(),y=null),h=null,r=null,g=!1,C.forEach(a=>{a.className="device-cell offline"}),b(),f()}catch(a){console.error("断开连接失败:",a)}}function j(){r!=null&&r.isConnected()&&r.generateOne()}function H(){r!=null&&r.isConnected()&&r.stopGenerating(),g=!0,b()}function K(){r!=null&&r.isConnected()&&r.startGenerating(),g=!1,b()}function q(){L=0,$=0,o.dataList.innerHTML='<div style="padding: 20px; text-align: center; color: #64748b;">暂无数据，请先连接适配器</div>',o.stateList.innerHTML='<div style="padding: 20px; text-align: center; color: #64748b;">暂无状态数据</div>',h&&h.dataState.clear(),r&&r.resetCount&&r.resetCount(),S(),o.devicesGrid.children.length>0&&M(),f()}function D(){o.connectBtn.addEventListener("click",Q),o.disconnectBtn.addEventListener("click",P),o.generateBtn.addEventListener("click",j),o.pauseBtn.addEventListener("click",H),o.resumeBtn.addEventListener("click",K),o.clearBtn.addEventListener("click",q),o.interval.addEventListener("change",()=>{const a=parseInt(o.interval.value);r!=null&&r.isConnected()&&r.updateOptions({interval:a})}),o.maxItems.addEventListener("change",()=>{const a=parseInt(o.maxItems.value);r!=null&&r.isConnected()&&r.updateOptions({maxItems:a})}),b(),f(),S(),M()}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",D):D();
